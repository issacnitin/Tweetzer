{"version":3,"sources":["Pages/Components/Authentication/Redux/AuthenticationReducer.ts","Pages/Components/Profile/Redux/SocialReducer.ts","Utils/Redux/SystemReducer.ts","Pages/Components/Tweet/Redux/TweetReducer.ts","Utils/Redux/ConfigureStore.ts","Utils/Network/BaseAPI.ts","Utils/Network/IdentityAPI.ts","Utils/Constants.ts","Utils/Redux/SystemActions.ts","Utils/Redux/SystemState.ts","Main/Header/LoggedOutHeader.tsx","Pages/Components/Authentication/Redux/AuthenticationActions.ts","Utils/Network/AuthenticationAPI.ts","Utils/Network/TweetAPI.ts","Pages/Components/Tweet/Redux/TweetActions.ts","Main/Header/LoggedInHeader.tsx","Pages/Components/Authentication/Login.tsx","Pages/Components/Authentication/Register.tsx","Pages/Components/Tweet/Tweet.tsx","Pages/Components/Tweet/Feed.tsx","Utils/Network/SocialAPI.ts","Pages/Components/Profile/Redux/SocialActions.ts","Pages/Components/Profile/FollowButton.tsx","Pages/Components/Profile/Profile.tsx","Pages/Components/Tweet/PostTweet.tsx","Pages/Home/Home.tsx","Pages/Home/SearchUserComponent.tsx","Pages/Home/Search.tsx","Main/App.tsx","serviceWorker.ts","index.tsx"],"names":["authReducerDefaultState","authToken","tokenRefreshTimestamp","socialReducerDefaultState","following","followers","systemReducerDefaultState","page","tweetReducerDefaultState","rootReducer","combineReducers","Authentication","state","action","type","authState","System","s","Object","assign","profile","s2","s3","myusername","username","s4","searchProfiles","s5","profiles","Tweet","tweet","Social","push","following2","indexOf","follower","filter","v","store","createStore","applyMiddleware","thunk","BaseAPI","port","baseURL","sendRequest","url","method","body","fetch","mode","headers","JSON","stringify","then","response","catch","error","console","sendRequestAuthorized","getState","this","IdentityAPI","json","responseBody","statusCode","status","text","Constants","searchstring","Page","changePage","startLoadProfile","getProfile","res","name","dispatch","endLoadProfile","err","undefined","startFetchMyDetails","getMyProfile","endSetMyUsername","startSearchProfile","identityController","searchUser","modals","m","endSearchProfile","profileModals","LoggedOutHeader","props","onLoginClick","LOGIN","onRegisterClick","SIGNUP","className","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","Form","inline","Button","variant","onClick","style","margin","React","Component","authAPIController","password","email","startSignIn","signIn","Date","getTime","localStorage","setItem","endSignIn","endSignInWithFail","HOME","endSignUp","endSignUpFail","signOut","removeItem","DEFAULT","TweetAPI","responseJSON","content","startTweetRefresh","tweetApiController","tweets","promise","refresh","t","timestamp","endTweetRefresh","endTweetPost","LoggedInHeader","onClickHome","onClickProfile","PROFILE","onSignoutClick","onSearchButtonClick","searchtext","SEARCH","search","startTweetSearch","handleChange","e","setState","target","value","FormControl","placeholder","onChange","Login","onCloseClick","signInFailed","subscribe","signInStatus","Modal","Dialog","Header","closeButton","Title","Body","InputGroup","Prepend","Text","aria-label","aria-describedby","role","Footer","validateForm","signUp","startSignUp","validateUsername","confirmpassword","length","validUsername","checkUsername","formValid","Promise","resolve","indexOfAt","indexOfDot","lastIndexOf","onClickUsername","date","borderRadius","background","padding","toDateString","Feed","sort","a","b","width","map","el","index","key","SocialAPI","endFollowSuccess","endFollowFail","endUnfollowSuccess","endUnfollowFail","FollowButton","onFollowButtonClick","follow","onUnfollowButtonClick","unfollow","nextProps","isFollowing","Profile","onNextPageClick","onPrevPageClick","Math","max","mine","justifyContent","alignContent","Pagination","alignSelf","Item","active","PostTweet","tweetText","characterCount","onPostTweetButtonClick","tweetState","postTweet","unshift","startTweetPost","backgroundColor","Group","controlId","Label","Control","resize","as","rows","flex","flexDirection","alignItems","FormText","Home","SearchUserComponent","onProfileClick","Search","Prev","Next","App","getItem","loggedIn","jsx","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a7673b2.chunk.js","sourcesContent":["import { AuthenticationState } from \"./AuthenticationState\";\nimport { AuthenticationActionTypes } from \"../../../../Utils/Redux/Actions\";\n\nconst authReducerDefaultState: AuthenticationState = {\n    authToken: \"\",\n    tokenRefreshTimestamp: -1\n} as AuthenticationState;\n\nconst authReducer = (state = authReducerDefaultState, action: AuthenticationActionTypes) => {\n    switch(action.type) {\n        case \"SIGN_IN\":\n            return action.authState;\n        case \"SIGN_OUT\":\n            return action.authState;\n        default:\n            return state;\n    }\n}\n\nexport {authReducer}\n\n","import { SocialState } from \"./SocialState\";\nimport { SocialActionTypes } from \"../../Profile/Redux/SocialActions\";\n\nconst socialReducerDefaultState: SocialState = {\n    following: [],\n    followers: []\n} as SocialState;\n\nconst socialReducer = (state = socialReducerDefaultState, action: SocialActionTypes) : SocialState => {\n    switch(action.type) {\n        case \"START_FOLLOW\":\n            let following = state.following;\n            following.push(action.following)\n            return Object.assign({}, {\n                followers: state.followers,\n                following: following\n            } as SocialState);\n        case \"END_FOLLOW\":\n            return Object.assign({}, {\n                followers: state.followers,\n                following: [...state.following, action.following] \n            } as SocialState);\n        case \"START_UNFOLLOW\":\n            return Object.assign({}, {\n                    followers: state.followers,\n                    following: state.following\n                })\n        case \"END_UNFOLLOW\":\n            let following2 = state.following;\n            let index = following2.indexOf(action.follower);\n            following2 = following2.filter((v) => {\n                return v != action.follower;\n            })\n            return Object.assign({}, {\n                    followers: state.followers,\n                    following: following2\n                })\n        default:\n            return state;\n    }\n}\n\nexport {socialReducer}\n\n","import { SystemState, Page } from \"./SystemState\";\nimport { SystemActionTypes } from \"./SystemActions\";\n\nconst systemReducerDefaultState: SystemState = {\n    page: 0\n} as SystemState;\n\nconst systemReducer = (state = systemReducerDefaultState, action: SystemActionTypes) => {\n    switch(action.type) {\n        case \"CHANGE_PAGE\":\n            state.page = action.page;\n            return state;\n        case \"START_LOAD_PROFILE\":\n            let s = Object.assign({}, state)\n            s.profile = action.profile;\n            return s\n        case \"END_LOAD_PROFILE\":\n            let s2 = Object.assign({}, state)\n            s2.profile = action.profile;\n            return s2\n        case \"SET_MY_PROFILE_ID\":\n            let s3 = Object.assign({}, state)\n            s3.myusername = action.username\n            return s3\n        case \"START_SEARCH_PROFILE\":\n            let s4 = Object.assign({}, state)\n            s4.searchProfiles = []\n            return s4;\n        case \"END_SEARCH_PROFILE\":\n            let s5 = Object.assign({}, state)\n            s5.searchProfiles = action.profiles;\n            return s5\n        default:\n            return state;\n    }\n}\n\nexport {systemReducer}\n\n","import { TweetState } from \"./TweetState\";\nimport { TweetActionTypes } from \"../../../../Utils/Redux/Actions\";\n\nconst tweetReducerDefaultState: TweetState[] = [];\n\nconst tweetReducer = (state = tweetReducerDefaultState, action: TweetActionTypes) => {\n    switch(action.type) {\n        case \"TWEET_POST\":\n            return state;\n        case \"TWEET_EDIT\":\n            return state;\n        case \"TWEET_DELETE\":\n            return state;\n        case \"START_TWEET_REFRESH\":\n            return [];\n        case \"START_TWEET_SEARCH\":\n            return [];\n        case \"END_TWEET_REFRESH\":\n            return Object.assign([], action.tweet)\n        default:\n            return state;\n    }\n}\n\nexport {tweetReducer}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\nimport { authReducer } from \"../../Pages/Components/Authentication/Redux/AuthenticationReducer\";\nimport { socialReducer } from \"../../Pages/Components/Profile/Redux/SocialReducer\";\nimport { systemReducer } from \"./SystemReducer\";\nimport { AppActions } from \"./Actions\";\nimport { tweetReducer } from \"../../Pages/Components/Tweet/Redux/TweetReducer\";\n\nexport const rootReducer = combineReducers({\n    Authentication: authReducer,\n    System: systemReducer,\n    Tweet: tweetReducer,\n    Social: socialReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport const store = createStore(\n    rootReducer, \n    applyMiddleware(thunk as ThunkMiddleware<AppState, AppActions>)\n);","import { store } from \"../../Utils/Redux/ConfigureStore\";\n\nexport default class BaseAPI {\n\n    baseURL: string = \"http://tweetzer.com\";\n    \n    constructor(port?: string) {\n        if(!!port) {\n            this.baseURL += \":\" + port;\n        }\n    }\n\n    sendRequest = (url: string, method: string = \"GET\", body?: any) : Promise<any> => {\n        return fetch(this.baseURL + (url[0] != \"/\" ? \"/\" : \"\") + url, {\n            method: method,\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json, text',\n                'Content-Type': 'application/json'\n            },\n\n            //make sure to serialize your JSON body\n            body: JSON.stringify(body)\n        })\n        .then((response) => {\n            return response\n        })\n        .catch((error) => {\n            console.error(error)\n            throw error\n        })\n    }\n\n    sendRequestAuthorized = (url: string, method: string = \"GET\", body?: any) : Promise<any> => {\n        let authToken = store.getState().Authentication.authToken;\n        return fetch(this.baseURL + (url[0] != \"/\" ? \"/\" : \"\") + url, {\n            method: method,\n            mode: 'cors',\n            headers: {\n                'Accept': 'application/json, text',\n                'Content-Type': 'application/json',\n                'Authorization': 'Bearer ' + authToken \n            },\n\n            //make sure to serialize your JSON body\n            body: JSON.stringify(body)\n        })\n        .then((response) => {\n            return response\n        })\n        .catch((error) => {\n            console.error(error)\n            throw error\n        })\n    }\n}","import BaseAPI from './BaseAPI';\n\nexport default class IdentityAPI extends BaseAPI {\n    constructor() {\n        super()\n    }\n\n    async getProfile(username: string) {\n        let response = await this.sendRequestAuthorized(\"/api/v1/profile/getprofile/\"+username, \"GET\")\n        let responseBody = await response.json();\n        return {\n            body: responseBody,\n            statusCode: response.status\n        }\n    }\n\n    async getMyProfile() {\n        let response = await this.sendRequestAuthorized(\"/api/v1/profile/getme\", \"GET\")\n        let responseBody = await response.json();\n        return {\n            body: responseBody,\n            statusCode: response.status\n        }\n    }\n\n    async checkUsername(username: string) {\n        let response = await this.sendRequestAuthorized(\"/api/v1/profile/checkusername/\" + username, \"GET\")\n        let responseBody = await response.json();\n        return {\n            body: responseBody,\n            statusCode: response.status\n        }\n    }\n\n    async searchUser(text: string, page: number) {\n        let response = await this.sendRequestAuthorized(\"/api/v1/profile/search/\" + text + \"/\" + page, \"GET\")\n        let responseBody = await response.json();\n        return {\n            body: responseBody,\n            statusCode: response.status\n        }\n    }\n}","export class Constants {\n    static username?: string = \"\"\n    static searchstring?: string = \"\"\n}","import { Page, ProfileModal } from './SystemState';\nimport { store } from './ConfigureStore';\nimport IdentityAPI from \"../Network/IdentityAPI\";\nimport { Constants } from '../Constants';\n\nexport const START_LOAD_PROFILE = \"START_LOAD_PROFILE\";\nexport const END_LOAD_PROFILE = \"END_LOAD_PROFILE\";\nexport const SET_MY_PROFILE_ID = \"SET_MY_PROFILE_ID\";\nexport const CHANGE_PAGE = \"CHANGE_PAGE\";\nexport const START_SEARCH_PROFILE = \"START_SEARCH_PROFILE\";\nexport const END_SEARCH_PROFILE = \"END_SEARCH_PROFILE\";\n\nexport interface ChangePageAction {\n    type: typeof CHANGE_PAGE;\n    page: Page\n}\n\nexport interface StartChangeProfileAction {\n    type: typeof START_LOAD_PROFILE;\n    profile: ProfileModal\n}\n\nexport interface EndChangeProfileAction {\n    type: typeof END_LOAD_PROFILE;\n    profile: ProfileModal\n}\n\nexport interface SetMyUsernameAction {\n    type: typeof SET_MY_PROFILE_ID;\n    username: string;\n}\n\nexport interface StartSearchProfileAction {\n    type: typeof START_SEARCH_PROFILE\n}\n\nexport interface EndSearchProfileAction {\n    type: typeof END_SEARCH_PROFILE,\n    profiles: ProfileModal[]\n}\n\nexport type SystemActionTypes = ChangePageAction \n| StartChangeProfileAction \n| EndChangeProfileAction \n| SetMyUsernameAction \n| StartSearchProfileAction \n| EndSearchProfileAction;\n\nexport const changePage = (page: Page): ChangePageAction => {\n    return {\n        type: \"CHANGE_PAGE\",\n        page: page\n    }\n}\n\nexport const startLoadProfile = (username: string) :  StartChangeProfileAction => {\n    Constants.username = username\n    let identityController: IdentityAPI = new IdentityAPI();\n    identityController.getProfile(username)\n    .then((res) => {\n        let profile = {} as ProfileModal;\n        profile.name = res.body[\"name\"];\n        profile.username = res.body[\"username\"];\n        Constants.username = username\n        store.dispatch(endLoadProfile(profile))\n    })\n    .catch((err) => {\n        let state = store.getState().System;\n        state.profile = undefined; \n    })\n    return {\n        type: \"START_LOAD_PROFILE\",\n        profile: {} as ProfileModal\n    }\n}\n\nexport const endLoadProfile = (profile: ProfileModal) : EndChangeProfileAction => {\n    return {\n        type: \"END_LOAD_PROFILE\",\n        profile: profile\n    }\n}\n\nexport const startFetchMyDetails = () : SetMyUsernameAction => {\n    let identityController: IdentityAPI = new IdentityAPI();\n    identityController.getMyProfile()\n    .then((res) => {\n        if(!!res && !!res.body) {\n            store.dispatch(endSetMyUsername(res.body[\"username\"]))\n            store.dispatch(startLoadProfile(res.body[\"username\"]))\n        }\n    })\n    .catch((err) => {\n\n    })\n    return {\n        type: \"SET_MY_PROFILE_ID\",\n        username: \"\"\n    }\n}\n\nexport const endSetMyUsername = (username: string) : SetMyUsernameAction => {\n    return {\n        type: \"SET_MY_PROFILE_ID\",\n        username: username\n    }\n}\n\nexport const startSearchProfile = (text: string, page: number = 0) : StartSearchProfileAction => {\n    let identityController = new IdentityAPI();\n    identityController.searchUser(text, page)\n    .then((res) => {\n        let body = res.body;\n        let modals: ProfileModal[] = [];\n        for(let profile of body) {\n            let m : ProfileModal = {} as ProfileModal;\n            m.name = profile[\"name\"]\n            m.username = profile[\"username\"]\n            modals.push(m)\n        }\n        store.dispatch(endSearchProfile(modals))\n    })\n    .catch((err) => {\n\n    })\n    return {\n        type: \"START_SEARCH_PROFILE\"\n    }\n}\n\nexport const endSearchProfile = (profileModals: ProfileModal[]) : EndSearchProfileAction => {\n    return {\n        type: \"END_SEARCH_PROFILE\",\n        profiles: profileModals\n    }\n}","export enum Page {\n    DEFAULT,\n    LOGIN,\n    SIGNUP,\n    PROFILE,\n    HOME,\n    SEARCH\n}\n\nexport interface ProfileModal {\n    name: string;\n    username: string;\n}\n  \nexport interface SystemState {\n    page: Page\n    profile?: ProfileModal\n    myusername?: string\n    searchProfiles?: ProfileModal[]\n}","import React from \"react\"\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from \"react-bootstrap\";\nimport { store } from \"../../Utils/Redux/ConfigureStore\"\nimport { changePage } from \"../../Utils/Redux/SystemActions\"\nimport { Page } from \"../../Utils/Redux/SystemState\";\n\ninterface IProps {\n\n}\n\ninterface IState {\n\n}\n\nexport default class LoggedOutHeader extends React.Component<IProps, IState> {\n    \n    constructor(props: IProps) {\n        super(props)\n    }\n\n    onLoginClick = () => {\n        store.dispatch(changePage(Page.LOGIN))\n    }\n\n    onRegisterClick = () => {\n        store.dispatch(changePage(Page.SIGNUP));\n    }\n\n    render() {\n        return (\n            <div className=\"header\">\n                <Navbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\">Tweetzer</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        <Nav.Link href=\"#home\"></Nav.Link>\n                        </Nav>\n                        <Form inline>\n                            <Button variant=\"primary\" onClick={this.onLoginClick} style={{margin: 10}}>Login</Button>\n                            <Button variant=\"secondary\" onClick={this.onRegisterClick} style={{margin: 10}}>Register</Button>\n                        </Form>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        )\n    }\n}","import { AuthenticationState } from \"./AuthenticationState\"\nimport { SignInAction, SignOutAction, SignUpAction } from \"../../../../Utils/Redux/Actions\";\nimport { AppState, store } from \"../../../../Utils/Redux/ConfigureStore\";\nimport { changePage, startFetchMyDetails } from \"../../../../Utils/Redux/SystemActions\";\nimport { Page } from \"../../../../Utils/Redux/SystemState\";\nimport AuthenticationAPI from \"../../../../Utils/Network/AuthenticationAPI\";\n\nlet authAPIController = new AuthenticationAPI();\n\nexport const startSignIn = (username: string, password: string) : SignInAction => {\n    let authState: AuthenticationState = store.getState().Authentication;\n    authAPIController.signIn(username, password)\n    .then((res) => {\n        let body = res.body\n        authState.authToken = !!body ? body[\"Token\"] : \"\";\n        authState.tokenRefreshTimestamp = (new Date()).getTime();\n        localStorage.setItem('username', username);\n        localStorage.setItem('password', password);\n        store.dispatch(endSignIn(authState))\n        store.dispatch(startFetchMyDetails())\n    })\n    .catch((err) => {\n        store.dispatch(endSignInWithFail(authState));\n    })\n    return {\n        type: \"SIGN_IN\",\n        authState\n    } as SignInAction\n}\n\nexport const endSignIn = (authState: AuthenticationState) : SignInAction => {\n    store.dispatch(changePage(Page.HOME))\n    return {\n        type: \"SIGN_IN\",\n        authState\n    } as SignInAction\n}\n\nexport const endSignInWithFail = (authState: AuthenticationState): SignInAction => {\n    return {\n        type: \"SIGN_IN\",\n        authState\n    } as SignInAction\n}\n\nexport const startSignUp = (name: string, username: string, email: string, password: string): SignUpAction => {\n    let authState: AuthenticationState = store.getState().Authentication;\n    authAPIController.signUp(name, username, email, password)\n    .then((res) => {\n        let body = res.body\n        authState.authToken = !!body ? body[\"Token\"] : \"\";\n        authState.tokenRefreshTimestamp = (new Date()).getTime();\n        localStorage.setItem('username', username ? username : email);\n        localStorage.setItem('password', password);\n        store.dispatch(endSignUp(authState))\n        store.dispatch(startFetchMyDetails())\n    })\n    .catch((err) => {\n        console.error(err)\n        store.dispatch(endSignUpFail(authState, err));\n    });\n    return {\n        type: \"SIGN_UP\",\n        authState\n    } as SignUpAction\n}\n\nexport const endSignUp = (authState: AuthenticationState) : SignUpAction => {\n    localStorage.setItem('token', authState.authToken);\n    store.dispatch(changePage(Page.HOME))\n    return {\n        type: \"SIGN_UP\",\n        authState\n    } as SignUpAction\n}\n\nexport const endSignUpFail = (authState: AuthenticationState, error: string) : SignUpAction => {\n    return {\n        type: \"SIGN_UP\",\n        authState\n    } as SignUpAction\n}\n\nexport const signOut = (): SignOutAction => {\n    let authState: AuthenticationState = store.getState().Authentication;\n    authState.authToken = \"\"\n    authState.tokenRefreshTimestamp = -1;\n    localStorage.removeItem('username');\n    localStorage.removeItem('password');\n    store.dispatch(changePage(Page.DEFAULT))\n    return {\n        type: \"SIGN_OUT\",\n        authState\n    } as SignOutAction\n}","import BaseAPI from \"./BaseAPI\";\n\nclass AuthenticationAPI extends BaseAPI {\n    constructor() {\n        super()\n    }\n\n    async signIn(username: string, password: string) {\n        let response = await this.sendRequest(\"/api/v1/profile/login\", \"POST\", { \"username\": username, \"password\": password})\n        let responseBody = await response.json();\n        return {\n            body: responseBody,\n            statusCode: response.status\n        }\n    }\n\n    async signUp(name: string, username: string, email: string, password: string) {\n        let response = await this.sendRequest(\"/api/v1/profile/register\", \"POST\", { \"name\": name, \"username\": username, \"email\": email, \"password\": password})\n        let responseBody = await response.json();\n        return {\n            body: responseBody,\n            statusCode: response.status\n        }\n    }\n\n    async refreshToken() {\n        let response = await this.sendRequest(\"/api/v1/profile/refreshtoken\", \"GET\")\n        let responseBody = await response.json();\n        return {\n            body: responseBody,\n            statusCode: response.status\n        }\n    }\n}\n\nexport default AuthenticationAPI;","import BaseAPI from \"./BaseAPI\";\n\nexport class TweetAPI extends BaseAPI {\n    constructor() {\n        super();\n    }\n    \n    async search(text: string, page: number) {\n        let response = await this.sendRequestAuthorized(\"/api/v1/tweet/search/\" + text + \"/\" + page, \"GET\");\n        let responseJSON = await response.json();\n        return {\n            body: responseJSON,\n            statusCode: response.status\n        }\n    }\n\n    async refresh(page: number) {\n        let response = await this.sendRequestAuthorized(\"/api/v1/tweet/feed/\" + page, \"GET\");\n        let responseJSON = await response.json();\n        return {\n            body: responseJSON,\n            statusCode: response.status\n        }\n    }\n\n    async fetch(username: string, page: number) {\n        let response = await this.sendRequestAuthorized(\"/api/v1/tweet/fetch/\" + username + \"/\" + page, \"GET\");\n        let responseJSON = await response.json();\n        return {\n            body: responseJSON,\n            statusCode: response.status\n        }\n    }\n\n    async postTweet(content: string) {\n        let response = await this.sendRequestAuthorized(\"/api/v1/tweet/post\", \"POST\", { \"content\": content });\n        let responseJSON = await response.json();\n        return {\n            body: responseJSON,\n            statusCode: response.status\n        }\n    }\n}","import { TweetState } from './TweetState';\nimport { TweetPostAction, StartTweetRefreshAction, EndTweetRefreshAction, StartSearchTweetAction } from \"../../../../Utils/Redux/Actions\";\nimport { store } from \"../../../../Utils/Redux/ConfigureStore\";\nimport { TweetAPI } from \"../../../../Utils/Network/TweetAPI\";\n\nexport const startTweetRefresh = (username: string|null = null, page: number = 0) : StartTweetRefreshAction => {\n    let tweetApiController = new TweetAPI();\n    let tweets: TweetState[] = [];\n    let promise: Promise<any> = tweetApiController.refresh(page);\n    if(username != null) {\n        promise = tweetApiController.fetch(username, page);\n    }\n    promise\n    .then((res) => {\n        let body = res.body\n        tweets = [];\n        for(let tweet of body) {\n            let t : TweetState = {} as TweetState;\n            t.content = tweet[\"content\"]\n            t.timestamp = tweet[\"timestamp\"]\n            t.username = tweet[\"username\"]\n            tweets.push(t)\n        }\n        store.dispatch(endTweetRefresh(tweets));\n    })\n    .catch((err) => {\n        store.dispatch(endTweetRefresh(tweets));\n    });\n    return {\n        type: \"START_TWEET_REFRESH\",\n        tweet: tweets\n    } as StartTweetRefreshAction;\n}\n\nexport const startTweetSearch = (text: string, page: number = 0) : StartSearchTweetAction => {\n    let tweetApiController = new TweetAPI();\n    let tweets: TweetState[] = [];\n    tweetApiController.search(text, page)\n    .then((res) => {\n        let body = res.body\n        tweets = [];\n        for(let tweet of body) {\n            let t : TweetState = {} as TweetState;\n            t.content = tweet[\"content\"]\n            t.timestamp = tweet[\"timestamp\"]\n            t.username = tweet[\"username\"]\n            tweets.push(t)\n        }\n        store.dispatch(endTweetRefresh(tweets));\n    })\n    .catch((err) => {\n        store.dispatch(endTweetRefresh(tweets));\n    });\n    return {\n        type: \"START_TWEET_SEARCH\",\n        tweet: tweets\n    } as StartSearchTweetAction; \n}\n\nexport const endTweetRefresh = (tweets: TweetState[]) : EndTweetRefreshAction => {\n    return {\n        type: \"END_TWEET_REFRESH\",\n        tweet: tweets\n    } as EndTweetRefreshAction\n}\n\nexport const startTweetPost = (content: string, timestamp: number) : TweetPostAction => {\n    \n    let tweet = {} as TweetState;\n    tweet.content = content;\n    tweet.timestamp = timestamp;\n\n    let tweetState = store.getState().Tweet;\n    \n    let tweetApiController = new TweetAPI();\n    let tweets = store.getState().Tweet;\n    let username = store.getState().System.myusername;\n    username = !!username ? username : \"\"\n    tweetApiController.postTweet(content)\n    .then((res) => {\n        if(res) {\n            tweetState.unshift({content: content, timestamp: timestamp, username: username} as TweetState)\n        }\n        store.dispatch(endTweetPost(tweets));\n    })\n    .catch((err) => {\n        store.dispatch(endTweetPost(tweets));\n    });\n\n    return {\n        type: \"TWEET_POST\",\n        tweet: tweetState\n    }\n}\n\nexport const endTweetPost = (tweets: TweetState[]) : TweetPostAction => {\n    return {\n        type: \"TWEET_POST\",\n        tweet: tweets\n    }\n}\n\nexport const tweetEdit = (content: string, timestamp: number) => {\n    let tweet = {} as TweetState;\n    tweet.content = content;\n    tweet.timestamp = timestamp;\n\n    let tweetState = store.getState().Tweet;\n\n    return {\n        type: \"TWEET_EDIT\",\n        tweetState\n    }\n}\n\nexport const tweetDelete = (content: string, timestamp: number) => {\n    let tweet = {} as TweetState;\n    tweet.content = content;\n    tweet.timestamp = timestamp;\n\n    let tweetState = store.getState().Tweet;\n\n    return {\n        type: \"TWEET_DELETE\",\n        tweetState\n    }\n}\n","import React from \"react\";\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from \"react-bootstrap\";\nimport { store } from \"../../Utils/Redux/ConfigureStore\";\nimport { changePage, startLoadProfile, startSearchProfile } from \"../../Utils/Redux/SystemActions\";\nimport { Page } from '../../Utils/Redux/SystemState';\nimport { signOut } from \"../../Pages/Components/Authentication/Redux/AuthenticationActions\";\nimport { startTweetSearch, startTweetRefresh } from \"../../Pages/Components/Tweet/Redux/TweetActions\";\nimport { Constants } from \"../../Utils/Constants\";\nimport \"./Header.css\";\n\ninterface IProps {\n\n}\n\ninterface IState {\n    searchtext: string\n}\n\nexport default class LoggedInHeader extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n        this.state = {\n            searchtext: \"\"\n        }\n    }\n\n    onClickHome = () => {\n        store.dispatch(startTweetRefresh())\n        store.dispatch(changePage(Page.HOME))\n    }\n\n    onClickProfile = () => {\n        Constants.username = store.getState().System.myusername\n        store.dispatch(changePage(Page.PROFILE))\n    }\n\n    onSignoutClick = () => {\n        store.dispatch(signOut())\n    }\n\n    onSearchButtonClick = () => {\n        Constants.searchstring = this.state.searchtext\n        store.dispatch(changePage(Page.SEARCH))\n        store.dispatch(startTweetSearch(this.state.searchtext))\n        store.dispatch(startSearchProfile(this.state.searchtext))\n    }\n\n    handleChange = (e: any) => {\n        this.setState({\n            searchtext: e.target.value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"header\">\n                <Navbar bg=\"light\" expand=\"lg\">\n                    <Navbar.Brand href=\"#home\">Tweetzer</Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\n                        <Nav className=\"mr-auto\">\n                        <Nav.Link onClick={this.onClickHome}>Home</Nav.Link>\n                        <Nav.Link onClick={this.onClickProfile} >Profile</Nav.Link>\n                        </Nav>\n                        <Form inline>\n                            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" onChange={(e: any) => this.handleChange(e)} />\n                            <Button variant=\"outline-success\" style={{margin: 10}} onClick={this.onSearchButtonClick}>Search</Button>\n                            <Button variant=\"secondary\" style={{margin: 10}} onClick={this.onSignoutClick}>Sign Out</Button>\n                        </Form>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n        )\n    }\n}","import React from \"react\"\nimport { Button, InputGroup, FormControl, Modal } from 'react-bootstrap'\nimport { startSignIn, signOut } from \"./Redux/AuthenticationActions\";\nimport { store } from \"../../../Utils/Redux/ConfigureStore\";\n\ninterface IProps {\n\n}\n\ninterface IState {\n    username: string;\n    password: string;\n    signInFailed: boolean;\n}\n\nclass Login extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            signInFailed: false\n        }\n\n        store.subscribe(() => {\n            let signInStatus = store.getState().Authentication.authToken == \"\";\n            this.setState({\n                signInFailed: signInStatus\n            });\n        })\n    }\n\n    onLoginClick = () => {\n        store.dispatch(startSignIn(this.state.username, this.state.password))\n    }\n    \n    onCloseClick = () => {\n        store.dispatch(signOut())\n    }\n    \n    handleChange = (e: any) => {\n        switch(e.target.name) {\n            case \"username\":\n                this.setState({\n                    username: e.target.value\n                });\n                break;\n            case \"password\":\n                this.setState({\n                    password: e.target.value\n                });\n                break;\n            default:\n                break;\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Modal.Dialog>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Login</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                            <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl\n                            name=\"username\"\n                            placeholder=\"Username\"\n                            aria-label=\"Username\"\n                            aria-describedby=\"basic-addon1\"\n                            onChange={(e: any) => this.handleChange(e)}\n                            />\n                        </InputGroup>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                            <InputGroup.Text id=\"basic-addon1\">Password</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"\"\n                            aria-label=\"\"\n                            aria-describedby=\"basic-addon1\"\n                            onChange={(e: any) => this.handleChange(e)}\n                            />\n                        </InputGroup>\n                    </Modal.Body>\n                    { \n                        this.state.signInFailed ? \n                        <div className=\"alert alert-primary\" role=\"alert\">\n                            Sign in failed!\n                        </div> : \n                        <div />\n                    }\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={this.onLoginClick}>Login</Button>\n                        <Button variant=\"secondary\" onClick={this.onCloseClick}>Close</Button>\n                    </Modal.Footer>\n                </Modal.Dialog>\n                \n            </div>\n        )\n    }\n}\n\nexport default Login;","import React from \"react\"\nimport { Button, InputGroup, FormControl, Modal } from 'react-bootstrap'\nimport { store } from \"../../../Utils/Redux/ConfigureStore\"\nimport { startSignUp, signOut } from \"./Redux/AuthenticationActions\";\nimport IdentityAPI from \"../../../Utils/Network/IdentityAPI\";\n\ninterface IProps {\n\n}\n\ninterface IState {\n    name: string;\n    username: string;\n    email: string;\n    password: string;\n    confirmpassword: string;\n    formValid: boolean;\n    validUsername: boolean;\n}\n\nexport default class Login extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n        this.state = {\n            name: \"\",\n            username: \"\",\n            email: \"\",\n            password: \"\",\n            confirmpassword: \"\",\n            formValid: true,\n            validUsername: true\n        }\n    }\n\n    onRegisterClick = () => {\n        this.validateForm()\n        .then((res: boolean) => {\n            if(res) {\n                store.dispatch(startSignUp(this.state.name, this.state.username, this.state.email, this.state.password));\n            }\n        })\n    }\n\n    onCloseClick = () => {\n        store.dispatch(signOut());\n    }\n\n    handleChange = (e: any) => {\n        switch(e.target.name) {\n            case \"username\":\n                this.setState({\n                    username: e.target.value\n                });\n                this.validateUsername(e.target.value);\n                break;\n            case \"email\":\n                this.setState({\n                    email: e.target.value\n                });\n                break;\n            case \"password\":\n                this.setState({\n                    password: e.target.value\n                });\n                break;\n            case \"confirmpassword\":\n                this.setState({\n                    confirmpassword: e.target.value\n                });\n                break;\n            case \"name\":\n                this.setState({\n                    name: e.target.value\n                });\n            default:\n                break;\n        }\n    }\n\n    validateUsername = (username: string) => {\n        if(username.length == 0) {\n            this.setState({\n                validUsername: false\n            })\n        }\n        let identityController = new IdentityAPI();\n        identityController.checkUsername(username)\n        .then((res) => {\n            this.setState({\n                validUsername: res.body[\"result\"]\n            })\n        })\n        .catch((err) => {\n            this.setState({\n                validUsername: false\n            })\n        })\n    }\n\n    validateForm() {\n        return new Promise<any>((resolve) => {\n\n            if(this.state.password.length == 0 || this.state.confirmpassword.length == 0 || this.state.username.length == 0 || this.state.email.length == 0) {\n                this.setState({\n                    formValid: false\n                });\n                resolve(false)\n                return;\n            }\n            if(this.state.password != this.state.confirmpassword) {\n                this.setState({\n                    formValid: false\n                });\n                resolve(false)\n                return;\n            }\n            let indexOfAt = this.state.email.indexOf('@');\n            let indexOfDot = this.state.email.lastIndexOf('.');\n            if(indexOfAt == -1 || indexOfDot == -1 || indexOfAt >= indexOfDot) {\n                this.setState({\n                    formValid: false\n                })\n                resolve(false)\n                return;\n            }\n            this.setState({\n                formValid: this.state.validUsername\n            });\n            resolve(true)\n        })\n    }\n\n    render() {\n\n        let error: JSX.Element = <div />;\n        if(!this.state.validUsername) {\n            error = <div className=\"alert alert-primary\" role=\"alert\">\n                        Empty username or username already exist\n                    </div> \n        \n        } else if(!this.state.formValid) {\n            if(this.state.password.length == 0 || this.state.confirmpassword.length == 0) {\n                error = <div className=\"alert alert-primary\" role=\"alert\">\n                            Form invalid\n                        </div> \n            } else if(this.state.password != this.state.confirmpassword) {\n                error = <div className=\"alert alert-primary\" role=\"alert\">\n                            Passwords don't match\n                        </div>\n            } else {\n                error = <div className=\"alert alert-primary\" role=\"alert\">\n                            Form invalid\n                        </div> \n            }\n        } \n        \n        return (\n            <div>\n                <Modal.Dialog>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Register</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <InputGroup className=\"mb-3\">\n                        <InputGroup.Prepend>\n                        <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl\n                            name=\"username\"\n                            placeholder=\"Username\"\n                            aria-label=\"Username\"\n                            aria-describedby=\"basic-addon1\"\n                            onChange={this.handleChange}\n                        />\n                        </InputGroup>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                            <InputGroup.Text id=\"basic-addon1\">Name</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl\n                            name=\"name\"\n                            placeholder=\"First and Last Name\"\n                            aria-label=\"First and Last Name\"\n                            aria-describedby=\"basic-addon1\"\n                            onChange={this.handleChange}\n                            />\n                        </InputGroup>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                            <InputGroup.Text id=\"basic-addon1\">Email</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl\n                                name=\"email\"\n                                placeholder=\"darthvader@starwars.com\"\n                                aria-label=\"darthvader@starwars.com\"\n                                aria-describedby=\"basic-addon1\"\n                                onChange={this.handleChange}\n                            />\n                        </InputGroup>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                            <InputGroup.Text id=\"basic-addon1\">Password</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl\n                                name=\"password\"\n                                type=\"password\"\n                                placeholder=\"\"\n                                aria-label=\"\"\n                                aria-describedby=\"basic-addon1\"\n                                onChange={this.handleChange}\n                            />\n                        </InputGroup>\n                        <InputGroup className=\"mb-3\">\n                            <InputGroup.Prepend>\n                            <InputGroup.Text id=\"basic-addon1\">Confirm Password</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl\n                                name=\"confirmpassword\"\n                                type=\"password\"\n                                placeholder=\"\"\n                                aria-label=\"\"\n                                aria-describedby=\"basic-addon1\"\n                                onChange={this.handleChange}\n                            />\n                        </InputGroup>\n                    </Modal.Body>\n                    {error}\n                    <Modal.Footer>\n                        <Button variant=\"primary\" onClick={this.onRegisterClick}>Register</Button>\n                        <Button variant=\"secondary\" onClick={this.onCloseClick}>Close</Button>\n                    </Modal.Footer>\n                </Modal.Dialog>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport { store } from \"../../../Utils/Redux/ConfigureStore\";\nimport { startLoadProfile, changePage } from \"../../../Utils/Redux/SystemActions\";\nimport { Page } from \"../../../Utils/Redux/SystemState\";\nimport { Constants } from \"../../../Utils/Constants\";\nimport \"./Tweet.css\"\n\ninterface IProps {\n    content: string\n    timestamp: number\n    username: string\n}\n\ninterface IState {\n\n}\n\n\nexport default class Tweet extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n    }\n\n    onClickUsername = (username: string) => {\n        Constants.username = username\n        store.dispatch(changePage(Page.PROFILE));\n    }\n\n    render() {\n        let date = new Date(this.props.timestamp * 1000);\n        \n        return (\n            <div style={{borderRadius: 10, background:'white', margin: 10, padding: 10}}>\n                \n                <div className=\"rowC\">\n                    <p>{date.toDateString()}&nbsp;&nbsp;</p>\n                    <a href=\"#\" onClick={(e) => this.onClickUsername(this.props.username)}>@{this.props.username}</a>\n                </div>\n                {this.props.content}\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport Tweet from './Tweet';\nimport { TweetState } from \"./Redux/TweetState\";\nimport { store } from \"../../../Utils/Redux/ConfigureStore\";\n\ninterface IProps {\n    \n}\n\ninterface IState {\n    tweets: TweetState[],\n    page: number\n}\n\nexport default class Feed extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n        this.state = {\n            tweets: store.getState().Tweet,\n            page: 0\n        }\n\n        store.subscribe(() => {\n            let tweets = store.getState().Tweet;\n            tweets.sort((a, b) => b.timestamp - a.timestamp)\n            this.setState({\n                tweets: tweets\n            });\n        })\n    }\n\n    render() {\n        return (\n            <div style={{width:'100%'}}>\n            {\n                this.state.tweets.map((el, index) => (\n                    <div>\n                        <Tweet key={index} content={el.content} timestamp={el.timestamp} username={el.username} />\n                        <br />\n                    </div>\n                ))\n            }\n            </div>\n        )\n    }\n}","import BaseAPI from './BaseAPI';\n\nexport default class SocialAPI extends BaseAPI {\n    constructor() {\n        super()\n    }\n\n    async follow(id: string) {\n        let response = await this.sendRequestAuthorized(\"/api/v1/social/follow/\" + id, \"GET\");\n        let responseJSON = await response.json();\n        return {\n            body: responseJSON,\n            statusCode: response.status\n        }\n    }\n    \n    async unfollow(id: string) {\n        let response = await this.sendRequestAuthorized(\"/api/v1/social/unfollow/\" + id, \"GET\");\n        let responseJSON = await response.json();\n        return {\n            body: responseJSON,\n            statusCode: response.status\n        }\n    }\n\n    async getFollowers(username: string) {\n        let response = await this.sendRequestAuthorized(\"/api/v1/social/getfollowers/\" + username, \"GET\");\n        let responseJSON = await response.json();\n        return {\n            body: responseJSON,\n            statusCode: response.status\n        }\n    }\n\n    async isFollowing(username: string) {\n        let response = await this.sendRequestAuthorized(\"/api/v1/social/amifollowing/\" + username, \"GET\");\n        let responseJSON = await response.json();\n        return {\n            body: responseJSON,\n            statusCode: response.status\n        }\n    }\n} ","import SocialAPI from \"../../../../Utils/Network/SocialAPI\"\nimport { SocialState } from \"./SocialState\";\nimport { store } from \"../../../../Utils/Redux/ConfigureStore\";\n\nexport const START_FOLLOW = \"START_FOLLOW\";\nexport const END_FOLLOW = \"END_FOLLOW\";\nexport const START_UNFOLLOW = \"START_UNFOLLOW\";\nexport const END_UNFOLLOW = \"END_UNFOLLOW\";\n\nexport interface StartFollowAction {\n    type: typeof START_FOLLOW;\n    following: string;\n}\n\nexport interface EndFollowAction {\n    type: typeof END_FOLLOW;\n    following: string;\n}\n\nexport interface StartUnfollowAction {\n    type: typeof START_UNFOLLOW;\n    follower: string;\n}\n\nexport interface EndUnfollowAction {\n    type: typeof END_UNFOLLOW;\n    follower: string;\n}\n\nexport type SocialActionTypes = StartFollowAction \n| EndFollowAction \n| StartUnfollowAction \n| EndUnfollowAction;\n\nexport const startFollow = (username: string) : StartFollowAction => {\n    let socialController = new SocialAPI();\n    socialController.follow(username)\n    .then((res) => {\n        if(!!res.body) {\n            store.dispatch(endFollowSuccess(username))\n        }\n    })\n    .catch((err) => {\n        console.error(err)\n        store.dispatch(endFollowFail())\n    })\n    return {\n        type: \"START_FOLLOW\",\n        following: \"\"\n    } as StartFollowAction;\n}\n\nexport const endFollowSuccess = (following: string): EndFollowAction => {\n    return {\n        type: \"END_FOLLOW\",\n        following: following\n    } as EndFollowAction;\n}\n\nexport const endFollowFail = (): EndFollowAction => {\n    return {\n        type: \"END_FOLLOW\",\n        following: \"\"\n    } as EndFollowAction;\n}\n\nexport const startUnfollow = (username: string) : StartUnfollowAction => {\n    let socialController = new SocialAPI();\n    socialController.unfollow(username)\n    .then((res) => {\n        if(!!res.body) {\n            store.dispatch(endUnfollowSuccess(username))\n        }\n    })\n    .catch((err) => {\n        store.dispatch(endUnfollowFail())\n    })\n    return {\n        type: \"START_UNFOLLOW\",\n        follower: \"\"\n    } as StartUnfollowAction;\n}\n\nexport const endUnfollowSuccess = (following: string): EndUnfollowAction => {\n    return {\n        type: \"END_UNFOLLOW\",\n        follower: following\n    } as EndUnfollowAction;\n}\n\nexport const endUnfollowFail = (): EndFollowAction => {\n    return {\n        type: \"END_FOLLOW\",\n        following: \"\"\n    } as EndFollowAction;\n}","import React from \"react\"\nimport { Button } from \"react-bootstrap\";\nimport { store } from \"../../../Utils/Redux/ConfigureStore\";\nimport { startFollow, startUnfollow } from \"./Redux/SocialActions\";\nimport SocialAPI from \"../../../Utils/Network/SocialAPI\";\nimport { Page } from \"../../../Utils/Redux/SystemState\";\n\ninterface IProps {\n    username: string\n}\n\ninterface IState {\n    following: boolean\n}\n\nexport default class FollowButton extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n        this.state = {\n            following: false\n        }\n\n    }\n    componentWillReceiveProps(nextProps: IProps) {\n        if(nextProps.username != this.props.username) {\n            let apiController = new SocialAPI();\n            apiController.isFollowing(nextProps.username)\n            .then((res) => {\n                this.setState({\n                    following: \"result\" in res.body && res.body[\"result\"] == true\n                })\n            })\n            .catch((err) => {\n                console.error(err)\n            })\n        }\n    }\n\n    onFollowButtonClick = () => {\n        store.dispatch(startFollow(this.props.username))\n        this.setState({\n            following: true\n        })\n    }\n    \n    onUnfollowButtonClick = () => {\n        store.dispatch(startUnfollow(this.props.username))\n        this.setState({\n            following: false\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {\n                    this.state.following ? \n                    <Button onClick={this.onUnfollowButtonClick}>Unfollow</Button>\n                    :\n                    <Button onClick={this.onFollowButtonClick}>Follow</Button>\n                }\n            </div>\n        )\n    }\n}","import React from \"react\"\nimport { store } from \"../../../Utils/Redux/ConfigureStore\"\nimport Feed from \"../Tweet/Feed\";\nimport { startTweetRefresh } from \"../Tweet/Redux/TweetActions\";\nimport { Constants } from \"../../../Utils/Constants\";\nimport FollowButton from \"./FollowButton\";\nimport { startLoadProfile } from \"../../../Utils/Redux/SystemActions\";\nimport Pagination from 'react-bootstrap/Pagination';\n\ninterface IProps {\n    \n}\n\ninterface IState {\n    name: string;\n    username: string;\n    mine: boolean;\n    page: number;\n}\n\nexport default class Profile extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n        let username = Constants.username\n        this.state = {\n            name: \"\",\n            username: \"\",\n            mine: false,\n            page: 0\n        }\n        \n        if(!!username) {\n            store.dispatch(startLoadProfile(username))\n        }\n        store.dispatch(startTweetRefresh(username))\n        store.subscribe(() => {\n            let state = store.getState().System;\n            if(!!state.profile) {\n                this.setState({\n                    name: state.profile.name,\n                    username: state.profile.username,\n                    mine: state.profile.username == state.myusername\n                })\n            }\n        })\n    }\n\n    onNextPageClick = () => {\n        this.setState({\n            page: this.state.page + 1\n        }, () => {\n            store.dispatch(startTweetRefresh(null, this.state.page))\n        })\n    }\n\n    onPrevPageClick = () => {\n        this.setState({\n            page: Math.max(0, this.state.page - 1)\n        }, () => {\n            store.dispatch(startTweetRefresh(null, this.state.page))\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <p>{this.state.name}</p>\n                    <br />\n                    <p>@{this.state.username}</p>\n                </div>\n                {\n                    !this.state.mine ? \n                    <FollowButton username={this.state.username}/>\n                    :\n                    <div />\n                }\n                <Feed />\n                <div style={{width:'100%', justifyContent:'center', alignContent: 'center'}}>\n                    <Pagination style={{width:'30%', alignSelf:'center', justifyContent:'space-around'}}>\n                        <Pagination.Item onClick={this.onPrevPageClick}>Previous</Pagination.Item>\n                        <Pagination.Item active>{this.state.page + 1}</Pagination.Item>\n                        <Pagination.Item onClick={this.onNextPageClick}>&nbsp;&nbsp;&nbsp;&nbsp;Next</Pagination.Item>\n                    </Pagination>\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { Form, Button, FormText } from 'react-bootstrap'\nimport { store } from \"../../../Utils/Redux/ConfigureStore\";\nimport { startTweetPost } from \"../Tweet/Redux/TweetActions\";\n\ninterface IProps {\n\n}\n\ninterface IState {\n    tweetText: string;\n    characterCount: number;\n}\n\nexport class PostTweet extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n        this.state = {\n            tweetText: \"\",\n            characterCount : 0\n        }\n    }\n\n    handleChange = (e: any) => {\n        switch(e.target.name) {\n            case \"tweettext\":\n                this.setState({\n                    tweetText: e.target.value,\n                    characterCount: e.target.value.length\n                })\n                break;\n            default:\n                break;\n        }\n    }\n\n    onPostTweetButtonClick = () => {\n        store.dispatch(startTweetPost(this.state.tweetText, (new Date()).getTime()/1000));\n    }\n\n    render() {\n        return (\n            <div style={{width:'100%', backgroundColor:'white', padding: 10, margin: 10, borderRadius: 10}}>\n                <Form>\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                        <Form.Label>Post a tweet</Form.Label>\n                        <Form.Control style={{resize: 'none'}} name=\"tweettext\" as=\"textarea\" rows=\"3\" onChange={(e) => this.handleChange(e)} />\n                    </Form.Group>\n                </Form>\n                <div style={{flex: 1, flexDirection: 'row', alignItems: 'flex-end'}}>\n                    <FormText style={{flex:1}}>{this.state.characterCount}</FormText>\n                    <Button style={{flex:1}} onClick={this.onPostTweetButtonClick} variant=\"primary\">Post Tweet</Button>\n                </div>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport Feed from \"../Components/Tweet/Feed\";\nimport { store } from \"../../Utils/Redux/ConfigureStore\";\nimport { startTweetRefresh } from \"../Components/Tweet/Redux/TweetActions\";\nimport { PostTweet } from \"../Components/Tweet/PostTweet\";\nimport Pagination from 'react-bootstrap/Pagination';\ninterface IProps {\n\n}\n\ninterface IState {\n    myusername?: string\n    page: number\n}\n\n\nexport default class Home extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n        this.state = {\n            myusername: store.getState().System.myusername,\n            page: 0\n        }\n        store.dispatch(startTweetRefresh());\n        store.subscribe(() => {\n            let myusername = store.getState().System.myusername\n            if(myusername != this.state.myusername) {\n                this.setState({\n                    myusername: myusername\n                })\n            }\n        })\n    }\n\n    onNextPageClick = () => {\n        this.setState({\n            page: this.state.page + 1\n        }, () => {\n            store.dispatch(startTweetRefresh(null, this.state.page))\n        })\n    }\n\n    onPrevPageClick = () => {\n        this.setState({\n            page: Math.max(0, this.state.page - 1)\n        }, () => {\n            store.dispatch(startTweetRefresh(null, this.state.page))\n        })\n    }\n\n    render() {\n        return (\n            <div style={{width:'100%'}}>\n                {this.state.myusername}\n                <PostTweet />\n                <Feed />\n                <div style={{width:'100%', justifyContent:'center', alignContent: 'center'}}>\n                    <Pagination style={{width:'30%', alignSelf:'center', justifyContent:'space-around'}}>\n                        <Pagination.Item onClick={this.onPrevPageClick}>Previous</Pagination.Item>\n                        <Pagination.Item active>{this.state.page + 1}</Pagination.Item>\n                        <Pagination.Item onClick={this.onNextPageClick}>&nbsp;&nbsp;&nbsp;&nbsp;Next</Pagination.Item>\n                    </Pagination>\n                </div>\n            </div>\n        )\n    }\n}","import * as React from 'react';\nimport { Button } from \"react-bootstrap\";\nimport { store } from \"../../Utils/Redux/ConfigureStore\";\nimport { startLoadProfile, changePage } from \"../../Utils/Redux/SystemActions\";\nimport { Page } from '../../Utils/Redux/SystemState';\nimport { Constants } from '../../Utils/Constants';\n\ninterface IProps {\n    name: string;\n    username: string;\n}\n\ninterface IState {\n\n}\n\nexport default class SearchUserComponent extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n    }\n\n    onProfileClick = () => {\n        Constants.username = this.props.username\n        store.dispatch(changePage(Page.PROFILE))\n    }\n\n    render() {\n        return (\n            <div style={{backgroundColor:'lightblue', margin: 10, padding: 10, borderRadius: 10}}>\n                {this.props.name}\n                {this.props.name.length > 0 ? <br /> : <div /> }\n                <a href=\"#\" onClick={this.onProfileClick}>@{this.props.username}</a>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport Feed from \"../Components/Tweet/Feed\";\nimport { store } from \"../../Utils/Redux/ConfigureStore\";\nimport SearchUserComponent from \"./SearchUserComponent\";\nimport { ProfileModal } from \"../../Utils/Redux/SystemState\";\nimport Pagination from 'react-bootstrap/Pagination';\nimport { startTweetRefresh } from \"../Components/Tweet/Redux/TweetActions\";\nimport { startSearchProfile } from \"../../Utils/Redux/SystemActions\";\nimport { Constants } from \"../../Utils/Constants\";\n\ninterface IProps {\n\n}\n\ninterface IState {\n    searchstring: string,\n    profiles?: ProfileModal[],\n    page: number\n}\n\n\nexport default class Search extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props)\n        let state = store.getState().System.searchProfiles;\n        this.state = {\n            searchstring: !!Constants.searchstring ? Constants.searchstring : \"\",\n            profiles: state,\n            page: 0\n        }\n        store.subscribe(() => {\n            let profiles = store.getState().System.searchProfiles\n            this.setState({\n                profiles: profiles\n            })\n        })\n    }\n\n    onNextPageClick = () => {\n        this.setState({\n            page: this.state.page + 1\n        }, () => {\n            store.dispatch(startSearchProfile(this.state.searchstring, this.state.page))\n            store.dispatch(startTweetRefresh(null, this.state.page))\n        })\n    }\n\n    onPrevPageClick = () => {\n        this.setState({\n            page: Math.max(0, this.state.page - 1)\n        }, () => {\n            store.dispatch(startSearchProfile(this.state.searchstring, this.state.page))\n            store.dispatch(startTweetRefresh(null, this.state.page))\n        })\n    }\n\n    render() {\n        return (\n            <div style={{width:'100%'}}>\n                {\n                    this.state.profiles?.map((el) => {\n                        return <div>\n                            <SearchUserComponent name={el.name} username={el.username} />\n                            <br />\n                        </div>\n                    })\n                }\n                <Feed />\n                <Pagination style={{width:'100%', alignSelf:'center'}}>\n                    <Pagination.Prev onClick={this.onPrevPageClick}/>\n                        <Pagination.Item active>{this.state.page + 1}</Pagination.Item>\n                    <Pagination.Next onClick={this.onNextPageClick}/>\n                </Pagination>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport LoggedOutHeader from './Header/LoggedOutHeader';\nimport { AppState, store } from '../Utils/Redux/ConfigureStore';\nimport LoggedInHeader from './Header/LoggedInHeader';\nimport { ProfileModal } from '../Utils/Redux/SystemState';\nimport { Page } from '../Utils/Redux/SystemState';\nimport Login from '../Pages/Components/Authentication/Login';\nimport Register from '../Pages/Components/Authentication/Register';\nimport Profile from '../Pages/Components/Profile/Profile';\nimport Home from '../Pages/Home/Home';\nimport Search from '../Pages/Home/Search';\nimport { startSignIn } from \"../Pages/Components/Authentication/Redux/AuthenticationActions\";\n\ninterface IProps {\n\n}\n\ninterface IState {\n  loggedIn: boolean\n  page: Page\n  profile?: ProfileModal\n}\n\nclass App extends React.Component<IProps, IState> {\n  \n  constructor(props: IProps) {\n    super(props)\n    let username = localStorage.getItem('username');\n    let password = localStorage.getItem('password');\n    if(username != null && password != null) {\n      store.dispatch(startSignIn(username, password))\n    }\n    \n    this.state = {\n      page: Page.DEFAULT,\n      loggedIn: false,\n      profile: undefined\n    }\n\n    store.subscribe(() => {\n      let state = store.getState()\n      if(state.System.page != this.state.page) {\n        this.setState({\n          page: state.System.page,\n          loggedIn: !!state.Authentication.authToken && state.Authentication.authToken != \"\"\n        });\n      }\n      if(this.state.profile == null) {\n        this.setState({\n          profile: state.System.profile\n        })\n      }\n    })\n  }\n\n  render () {\n    let jsx: JSX.Element = <div />;\n\n    switch(this.state.page) {\n      case Page.LOGIN:\n        jsx = <Login />\n        break;\n      case Page.SIGNUP:\n        jsx = <Register />\n        break;\n      case Page.HOME:\n        jsx = <Home />\n        break;\n      case Page.PROFILE:\n        jsx = <Profile />\n        break;\n      case Page.SEARCH:\n        jsx = <Search />\n        break;\n      default:\n        jsx = <div />\n        break;\n    }\n\n    return (\n      <div className=\"App\">\n        {\n          this.state.loggedIn ? \n            <LoggedInHeader />\n          : \n            <LoggedOutHeader />\n        }\n        {jsx}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Main/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './Utils/Redux/ConfigureStore';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}